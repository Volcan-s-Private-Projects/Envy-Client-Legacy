package mathax.client.systems.modules.movement;

import mathax.client.settings.BoolSetting;
import mathax.client.settings.DoubleSetting;
import mathax.client.settings.Setting;
import mathax.client.settings.SettingGroup;
import mathax.client.systems.modules.Categories;
import mathax.client.systems.modules.Module;
import net.minecraft.item.Items;
import net.minecraft.util.math.Vec3d;



public final class TensorFly extends Module {

    public TensorFly() {
        super(Categories.Movement, Items.ELYTRA, "TensorFly", "ElytraFly Yoiked from Tensor");
    }

    private final SettingGroup sgGeneral = settings.getDefaultGroup();

    public final Setting<Boolean> ignoreFluids = sgGeneral.add(new BoolSetting.Builder()
        .name("ignoreFluids")
        .description("Ignore Fluids")
        .defaultValue(true)
        .build()
    );

    public final Setting<Boolean> alwaysMoving = sgGeneral.add(new BoolSetting.Builder()
        .name("alwaysMoving")
        .description("always Moving")
        .defaultValue(true)
        .build()
    );

    public final Setting<Boolean> stableY = sgGeneral.add(new BoolSetting.Builder()
        .name("stableY")
        .description("stableY")
        .defaultValue(true)
        .build()
    );

    public final Setting<Boolean> rotationY = sgGeneral.add(new BoolSetting.Builder()
        .name("rotationY")
        .description("rotationY")
        .defaultValue(true)
        .build()
    );

    public final Setting<Double> liquidsHorizontal = sgGeneral.add(new DoubleSetting.Builder()
        .name("liquids-horizontal")
        .description("How much velocity you will take from liquids horizontally.")
        .defaultValue(15)
        .sliderRange(1, 100)
        .build()
    );

    @Override
    public void onTick() {
        if (!this.getPlayer().isFallFlying()) return;

        this.getPlayer().getAbilities().flying = false;

        if (areButtonsDown() || alwaysMoving.getValue()) {
            this.getPlayer().setVelocity(getFlyingVelocity());

        } else {
            this.getPlayer().setVelocity(0, 0, 0);
        }

        if (!stableY.getValue() && !rotationY.getValue()) {
            if (this.getMinecraft().options.keyJump.isPressed()) {
                this.getPlayer().setVelocity(this.getPlayer().getVelocity().add(0, getSpeed(), 0));
            } else if (getMinecraft().options.keySneak.isPressed()) {
                this.getPlayer().setVelocity(this.getPlayer().getVelocity().add(0, -getSpeed(), 0));
            }
        }
    }

    private float getSpeed() {
        return (float) (this.speed.getValue() / 10);
    }

    private boolean areButtonsDown() {
        if (this.getMinecraft().options.keyForward.isPressed()) return true;
        else if (this.getMinecraft().options.keyBack.isPressed()) return true;
        else if (this.getMinecraft().options.keyLeft.isPressed()) return true;
        else if (this.getMinecraft().options.keyRight.isPressed()) return true;

        if (rotationY.getValue()) {
            if (this.getMinecraft().options.keySneak.isPressed()) return true;
            else return this.getMinecraft().options.keyJump.isPressed();
        }

        return false;
    }

    private Vec3d getFlyingVelocity() {
        double x = this.getPlayer().getRotationVector().getX() * getSpeed();
        double y = this.getPlayer().getRotationVector().getY();
        double z = this.getPlayer().getRotationVector().getZ() * getSpeed();

        if (rotationY.getValue()) y *= getSpeed();

        return new Vec3d(x, stableY.getValue() ? 0 : y, z);
    }
}
